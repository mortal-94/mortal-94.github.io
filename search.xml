<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces1690D 滑动窗口</title>
    <url>/2022/06/17/Codeforces1690D%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="codeforces1690d-滑动窗口">Codeforces1690D 滑动窗口</h1>
<p><a href="https://codeforces.com/contest/1690/problem/D">原题链接</a></p>
<span id="more"></span>
<p>废话不多说，分析题目，题干比较简单，直接看例子</p>
<p>input</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">4</span><br><span class="line">5 3</span><br><span class="line">BBWBW</span><br><span class="line">5 5</span><br><span class="line">BBWBW</span><br><span class="line">5 1</span><br><span class="line">BBWBW</span><br><span class="line">1 1</span><br><span class="line">W</span><br></pre></td></tr></tbody></table></figure>
<p>output</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>在第一个测试用例中，" BBWBW " 和k = 3. 重新着色1个就足够了并得到“
BBBBW ”，有k个连续的B</p>
<p>在第二个测试用例中，" BBWBW " 和k = 5. 重新着色就2个就足够了并得到“
BBBBB ”，有k个连续的B</p>
<p>在第三个测试用例中，" BBWBW " 和k = 1 无需重新着色就已满足有 k
个连续的B</p>
</blockquote>
<p>典型的滑动窗口题，窗口大小就是 k (windowsize =
k)。按常规的滑动窗口题目的做法应该都会需要弄个哈希表来搞，这题比较简单，只需记录一些窗口中
W 的个数即可。 <span class="math display">\[
\begin{gather}
第一个测试用例\quad k=3 \\ \\
\begin{array}{ccccc}
    \text{leftIndex} &amp;&amp;&amp; \text{rightIndex}  \\
    \hline
    \text{B} &amp; \text{B} &amp; \text{W} &amp; \text{B} &amp; \text{W}
\\
\end{array}\\
\text{count}\_\text{W}=1
\\ \\ \\
\begin{array}{ccccc}
    &amp; \text{leftIndex} &amp;&amp;&amp; \text{rightIndex}  \\
    \hline
    \text{B} &amp; \text{B} &amp; \text{W} &amp; \text{B} &amp; \text{W}
\\
    \hline
    \text{Out}
\end{array}\\
\text{count}\_\text{W}=1
\\ \\ \\
\begin{array}{cccccc}
    &amp;&amp; \text{leftIndex} &amp;&amp;&amp; \text{rightIndex}  \\
    \hline
    \text{B} &amp; \text{B} &amp; \text{W} &amp; \text{B} &amp; \text{W}
\\
    \hline
    &amp;\text{Out}
\end{array}\\
\text{count}\_\text{W}=2
\end{gather}
\]</span></p>
<blockquote>
<p>整个滑动过程 最小的 count_W 即为答案。 为了更新 count_W
的值，可以引入一个 Out 变量记着出去的字母</p>
</blockquote>
<p>整体C++代码实现如下：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> count_W = <span class="number">0</span>; <span class="comment">//记录窗口内 W 的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'W'</span>)</span><br><span class="line">                count_W++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 滑动窗口 k  [leftIndex, rightIndex)</span></span><br><span class="line">        <span class="type">int</span> res = count_W;</span><br><span class="line">        <span class="type">int</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rightIndex = k - leftIndex;</span><br><span class="line">        <span class="comment">// Out 代表出去的字母， s[rightIndex - 1] 代表进来的字母</span></span><br><span class="line">        <span class="type">char</span> Out = s[leftIndex];</span><br><span class="line">        leftIndex++, rightIndex++;</span><br><span class="line">        <span class="keyword">for</span> (; rightIndex &lt;= n; rightIndex++, leftIndex++)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 更新 count_W</span></span><br><span class="line">            <span class="keyword">if</span> (Out != s[rightIndex - <span class="number">1</span>])</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (Out == <span class="string">'W'</span>)</span><br><span class="line">                    count_W--;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    count_W++;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 更新出去的字母 以及 答案</span></span><br><span class="line">            Out = s[leftIndex];</span><br><span class="line">            res = res &lt; count_W ? res : count_W;</span><br><span class="line">        }</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="写在最后">写在最后</h3>
<p>大家好，这是我知乎的第一篇文章，希望多多支持，本人喜欢 <strong>打 注
释</strong>
，顺手发发文章。个人觉得这样能让自己以及他人能够更好地读懂自己代码，想必大家都能体会到心情激动地Google到别人的代码却完全看不懂TA写啥的那种感受，尤其这段代码还能完美解决你的问题的时候。。。</p>
<p>还有 <a href="https://codeforces.com/">codefores</a>
这个居然刷题网站可以查看别人的 submit
的代码！！（点那串数字；不过常常不知道别人在写啥，但 CTRL C V 过来就是能
AC ，可能是我太菜了 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>OJ题</category>
      </categories>
      <tags>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>SAT求解器的应用</title>
    <url>/2022/06/18/SAT%E6%B1%82%E8%A7%A3%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="sat求解器的应用">SAT求解器的应用</h1>
<blockquote>
<p>判断欧拉图</p>
<p>判断哈密顿图</p>
<p>判断可三角划分图</p>
</blockquote>
<span id="more"></span>
<h2 id="欧拉图">欧拉图</h2>
<h2 id="哈密顿图">哈密顿图</h2>
<p>原子命题定义 设有<span class="math inline">\(n^2\)</span>个原子命题
<span class="math inline">\(H_{ab}，1 ≤ a,b ≤ n\)</span>。 这里的 <span class="math inline">\(H_{ab}\)</span> 表示哈密顿回路中的第 $a $
个位置被节点 <span class="math inline">\(b\)</span> 占据。</p>
<ol type="1">
<li>每个节点 b 必须出现在路径中。</li>
<li>路径中没有节点 b 出现两次。</li>
<li>路径上的每个位置 a 都必须被占用。</li>
<li>非连通节点 b 和 c 在路径中不能相邻。（即相邻要连通
（在哈密顿回路中第一个节点和最后一个节点视为相邻</li>
</ol>
<h3 id="构造命题逻辑简单合取范式公式">构造命题逻辑简单合取范式公式</h3>
<p><span class="math display">\[
\begin{align*}
&amp; 1.\bigwedge_{b=1}^n\bigvee_{i=1}^n{H_{ib}}\\
&amp; 2.\bigwedge_{b=1}^n\bigwedge_{i=1}^{n}\bigwedge_{j=1}^n{(\neg
H_{ib}\vee\neg H_{jb})}\\
&amp; 3.\bigwedge_{a=1}^n\bigvee_{i=1}^{n}{H_{ai}}\\
&amp;
4.\bigwedge_{b=1}^n\bigwedge_{c=b+1}^n\bigwedge_{i=1}^{n-1}{((H_{ib}\wedge
H_{(i+1)c}\wedge e_{bc})\vee(\neg e_{bc}\wedge\neg(H_{ib}\wedge
H_{(i+1)c})))}
\end{align*}
\]</span></p>
<h2 id="可三角划分图">可三角划分图</h2>
<p>定义：</p>
<p>定义原子命题</p>
<p>满足条件</p>
<ol type="1">
<li>共有 n 个集合</li>
<li>每个顶点都在要在一个集合中</li>
<li>没有顶点同时在两个集合中</li>
</ol>
<p><span class="math display">\[
\begin{align*}
&amp;
1.\bigwedge_{c=1}^n{\bigvee_{i=1}^{3n}\bigvee_{j=1}^{3n}\bigvee_{k=1}^{3n}
g_{ijkc}}
\\
&amp;
2.\bigwedge_{i=1}^{3n}\bigvee_{j=1}^{3n}\bigvee_{k=1}^{3n}\bigvee_{c=1}^ng_{ijkc}
\\
&amp;
3.\bigwedge_{i=1}^{3n}\bigwedge_{j=1}^{3n}\bigwedge_{k=1}^{3n}\bigwedge_{c_1=1}^{n}\bigwedge_{c_2=1}^{n}{(\neg
g_{ijkc_1} \vee \neg g_{ijkc_2})}
\end{align*}
\]</span></p>
<h1 id="参考">参考</h1>
]]></content>
      <tags>
        <tag>SAT</tag>
        <tag>命题逻辑</tag>
        <tag>pycosat</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python大一下期末</title>
    <url>/2022/06/20/python%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E6%9C%AB/</url>
    <content><![CDATA[<h1 id="python大一下期末">python大一下期末</h1>
<ol type="1">
<li>MindSpore最基础的数据结构</li>
<li>R语言 （）型</li>
<li>矩阵 自定义 索引 和 列名</li>
<li>dataframe数据内连合并 后缀名</li>
<li>sklearn wine数据 聚会svc 建模</li>
</ol>
<p>series转dataframe</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>草稿</tag>
      </tags>
  </entry>
  <entry>
    <title>vscdoe使用</title>
    <url>/2022/06/20/vscode%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="vscdoe使用">vscdoe使用</h1>
<h2 id="搭载c环境">搭载C++环境</h2>
<p>参考这个视频</p>
<p><a href="https://www.bilibili.com/video/BV1Cu411y7vT?spm_id_from=333.788.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1Cu411y7vT?spm_id_from=333.788.top_right_bar_window_history.content.click</a></p>
<blockquote>
<p>把C++插件退回以前的版本(1.8.4)进行操作</p>
<p>主要是不用自己配文件</p>
</blockquote>
<h2 id="vscode无法运行和调试使用了部分stl库的程序">vscode无法运行和调试使用了部分stl库的程序</h2>
<p>参考这篇文章</p>
<p><a href="https://blog.csdn.net/qq_43700779/article/details/121891677">https://blog.csdn.net/qq_43700779/article/details/121891677</a></p>
<blockquote>
<p>问题在于 libstdc++ -6.dll
动态库在环境变量中存在多个，操作系统运行C/C++程序的时候不知道该用哪个库文件</p>
<p>在 /Mingw/bin 目录下，找到 libstdc++ -6.dll
文件，将其放到C:32目录下</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>操作记录</tag>
        <tag>vscode</tag>
        <tag>持续更新</tag>
      </tags>
  </entry>
  <entry>
    <title>youtube-dl和yt-dlp以及you-get使用体验</title>
    <url>/2022/06/20/youtube-dl%E5%92%8Cyt-dlp%E4%BB%A5%E5%8F%8Ayou-get%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="youtube-dl和yt-dlp以及you-get使用体验">youtube-dl和yt-dlp以及you-get使用体验</h1>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>草稿</tag>
        <tag>视频下载</tag>
      </tags>
  </entry>
  <entry>
    <title>人口统计数据分析器</title>
    <url>/2022/06/17/%E4%BA%BA%E5%8F%A3%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%99%A8/</url>
    <content><![CDATA[<h1 id="人口统计数据分析器">人口统计数据分析器</h1>
<p>最近快考python了，上网找了个小项目来练习一下。</p>
<p>这个项目来自 <strong>freecodecamp</strong> 里面的 <strong>Python
和数据分析</strong> 这个教程。</p>
<p>项目链接： <a href="https://chinese.freecodecamp.org/learn/data-analysis-with-python/data-analysis-with-python-projects/demographic-data-analyzer">人口统计数据分析器</a>
<a href="https://github.com/freeCodeCamp/boilerplate-demographic-data-analyzer">github</a></p>
<span id="more"></span>
<h2 id="题目要求">题目要求：</h2>
<blockquote>
<p>你必须使用 Pandas 来回答以下问题：</p>
<ol type="1">
<li>这个数据集中每个种族有多少人？ 这应该是一个以种族名称作为索引标签的
Pandas 系列。 （<code>race</code> 栏）</li>
<li>男性的平均年龄是多少？</li>
<li>拥有学士学位的人的百分比是多少？</li>
<li>受过高等教育（<code>Bachelors</code>, <code>Masters</code>, or
<code>Doctorate</code>）收入超过 50K 的人占多大比例？</li>
<li>没有受过高等教育的人的收入超过 50K 的比例是多少？</li>
<li>一个人每周最少工作多少小时？</li>
<li>每周工作最少小时数的人中有多少人的工资超过 50K？</li>
<li>哪个国家/地区的收入 &gt;50K 的人口比例最高，该比例是多少？</li>
<li>确定印度收入 &gt;50K 的人最受欢迎的职业。</li>
</ol>
</blockquote>
<h2 id="分析">分析</h2>
<ol type="1">
<li><p>这个数据集中每个种族有多少人？
这应该是一个以种族名称作为索引标签的 Pandas 系列。 （<code>race</code>
栏）</p>
<p>利用 <code>Series.value_counts()</code> 方法直接可以算出
<code>race</code> 栏各个值的数量。索引：<code>race</code>
的各个值；值：<code>race</code> 的各个值对应的数量。</p></li>
<li><p>男性的平均年龄是多少？</p>
<p><code>df.loc[df['sex'] == 'Male']</code>直接取出所有性别为男性的行，再对其
<code>age</code> 求 <code>mean</code> 便可</p></li>
<li><p>拥有学士学位的人的百分比是多少？</p>
<p><code>df.loc[df['education'] == 'Bachelors']</code>直接取出所有学士学位的行，用其行数
和 总数据的行数 相除即可（行数：<code>.shape[0]</code> ）</p></li>
<li><p>受过高等教育（<code>Bachelors</code>, <code>Masters</code>, or
<code>Doctorate</code>）收入超过 50K 的人占多大比例？</p>
<p>用 <code>Series.isin( 高等教育对应的学位 )</code> 方法得出对应的
<code>bool</code>值的<code>Series</code>，再定位到总数据中对应的行；筛选出这些行中
<code>salary &gt;50k</code>
的行数即为受过满足题意的人生，再除以受过高等教育的总人数得到比例值</p></li>
<li><p>没有受过高等教育的人的收入超过 50K 的比例是多少？</p>
<p>方法同 4。</p></li>
<li><p>一个人每周最少工作多少小时？</p>
<p>这个可以拿出 <code>hours-per-week</code> 这一列使用
<code>min()</code> 方法即可。</p></li>
<li><p>每周工作最少小时数的人中有多少人的工资超过 50K？</p>
<p>定位： <code>df['hours-per-week'] == 每周工作最少小时数</code> 和
<code>salary &gt; 50k</code> ，满足这些的数量 除以
定位仅为<code>df['hours-per-week'] == 每周工作最少小时数</code>
的数量得到占比。（这题答案是比例值。。。</p></li>
<li><p>哪个国家/地区的收入 &gt;50K 的人口比例最高，该比例是多少？</p>
<p>定位：<code>salary &gt; 50k</code> 的所有行中。求出每个国家/地区
<code>native-country</code> 对应的数量（同1）。用 <code>idxmax()</code>
方法 找出最大索引即那个 国家/地区。之后操作与7差不多。</p></li>
<li><p>确定印度收入 &gt;50K 的人最受欢迎的职业。</p>
<p>定位：国家是印度，<code>salary &gt; 50k</code>
。同1求出各个定位出来的行中 <code>occupation</code> 对应的数量，再用
<code>idxmax()</code> 方法找出最大值索引即那个 职业。</p></li>
</ol>
<h1 id="整体代码">整体代码：</h1>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_demographic_data</span>(<span class="params">print_data=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="comment"># 从文件中读取数据</span></span><br><span class="line">    df = pd.read_csv(<span class="string">'adult.data.csv'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.这个数据集中每个种族有多少人？ 这应该是一个以种族名称作为索引标签的 Pandas Series。 （race 栏）</span></span><br><span class="line">    <span class="string">"""利用value_counts()方法"""</span></span><br><span class="line">    race_count = df[<span class="string">'race'</span>].value_counts()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.男性的平均年龄是多少？</span></span><br><span class="line">    <span class="string">"""df.loc[df['sex'] == 'Male']直接取出所有性别为男性的行，再对其 age 求 mean 便可'"""</span></span><br><span class="line">    average_age_men = <span class="built_in">round</span>(df.loc[df[<span class="string">'sex'</span>] == <span class="string">'Male'</span>][<span class="string">'age'</span>].mean(), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.拥有学士学位的人的百分比是多少？</span></span><br><span class="line">    <span class="string">"""df.loc[df['education'] == 'Bachelors']直接取出所有学士学位的行，用其行数 和 总数据的行数 相除即可"""</span></span><br><span class="line">    percentage_bachelors = <span class="built_in">round</span>(df.loc[df[<span class="string">'education'</span>] == <span class="string">'Bachelors'</span>].shape[<span class="number">0</span>] / df.shape[<span class="number">0</span>] * <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.受过高等教育（Bachelors, Masters, or Doctorate）收入超过 50K 的人占多大比例？</span></span><br><span class="line">    <span class="comment"># 5.没有受过高等教育的人的收入超过 50K 的比例是多少？</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 受过高等教育 和 没受过高等教育 的标签</span></span><br><span class="line">    higher_education = [<span class="string">'Bachelors'</span>, <span class="string">'Masters'</span>, <span class="string">'Doctorate'</span>]</span><br><span class="line">    lower_education = [i <span class="keyword">for</span> i <span class="keyword">in</span> df[<span class="string">'education'</span>].unique() <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> higher_education]  <span class="comment"># unique()返回唯一值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 收入超过 50K 的人占多大比例？</span></span><br><span class="line">    <span class="string">"""用 isin() 方法得出对应的 bool值Series，再按题意定位到对应的行"""</span></span><br><span class="line">    higher_education_rich = df.loc[df[<span class="string">'education'</span>].isin(higher_education) &amp; (df[<span class="string">'salary'</span>] == <span class="string">'&gt;50K'</span>)].shape[<span class="number">0</span>] / \</span><br><span class="line">                            df[df[<span class="string">'education'</span>].isin(higher_education)].shape[<span class="number">0</span>]</span><br><span class="line">    higher_education_rich = <span class="built_in">round</span>(higher_education_rich * <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">    lower_education_rich = df.loc[(df[<span class="string">'education'</span>].isin(lower_education)) &amp; (df[<span class="string">'salary'</span>] == <span class="string">'&gt;50K'</span>)].shape[<span class="number">0</span>] / \</span><br><span class="line">                           df[df[<span class="string">'education'</span>].isin(lower_education)].shape[<span class="number">0</span>]</span><br><span class="line">    lower_education_rich = <span class="built_in">round</span>(lower_education_rich * <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.一个人每周最少工作多少小时？</span></span><br><span class="line">    <span class="string">"""这个可以直接求"""</span></span><br><span class="line">    min_work_hours = df[<span class="string">'hours-per-week'</span>].<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7.每周工作最少小时数的人中有多少人的工资超过 50K？</span></span><br><span class="line">    <span class="string">"""做法同上"""</span></span><br><span class="line">    rich_percentage = df.loc[df[<span class="string">'hours-per-week'</span>] == min_work_hours &amp; (df[<span class="string">'salary'</span>] == <span class="string">'&gt;50K'</span>)].shape[<span class="number">0</span>] / \</span><br><span class="line">                      df[df[<span class="string">'hours-per-week'</span>] == min_work_hours].shape[<span class="number">0</span>]</span><br><span class="line">    rich_percentage = <span class="built_in">round</span>(rich_percentage * <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 8.哪个国家/地区的收入 &gt;50K 的人口比例最高，该比例是多少？</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    df1 = df.loc[df['salary'] == '&gt;50K'] 把收入 &gt;50K 的行拿出来</span></span><br><span class="line"><span class="string">    df1['native-country'].value_counts() / df['native-country'].value_counts() 利用Series的性质把数量整体索引(国家/地区)对应相除</span></span><br><span class="line"><span class="string">    用 idxmax()方法 找出最大索引即那个 国家/地区</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    df1 = df.loc[df[<span class="string">'salary'</span>] == <span class="string">'&gt;50K'</span>]</span><br><span class="line">    highest_earning_country = (df1[<span class="string">'native-country'</span>].value_counts() / df[<span class="string">'native-country'</span>].value_counts()).idxmax()</span><br><span class="line">    <span class="string">"""知道了该国家，拿该国家 收入 &gt;50k 的人数 除 该国家的总人数 即可"""</span></span><br><span class="line">    highest_earning_country_percentage = (</span><br><span class="line">            df1.loc[df1[<span class="string">'native-country'</span>] == highest_earning_country].shape[<span class="number">0</span>] /</span><br><span class="line">            df.loc[df[<span class="string">'native-country'</span>] == highest_earning_country].shape[<span class="number">0</span>])</span><br><span class="line">    highest_earning_country_percentage = <span class="built_in">round</span>(highest_earning_country_percentage * <span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 9.确定印度收入 &gt;50K 的人最受欢迎的职业。</span></span><br><span class="line">    <span class="string">"""同上"""</span></span><br><span class="line">    top_IN_occupation = \</span><br><span class="line">    df.loc[(df[<span class="string">'native-country'</span>] == <span class="string">'India'</span>) &amp; (df[<span class="string">'salary'</span>] == <span class="string">'&gt;50K'</span>)][<span class="string">'occupation'</span>].value_counts().idxmax()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不要在此行以下修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> print_data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Number of each race:\n"</span>, race_count)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Average age of men:"</span>, average_age_men)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Percentage with Bachelors degrees: <span class="subst">{percentage_bachelors}</span>%"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Percentage with higher education that earn &gt;50K: <span class="subst">{higher_education_rich}</span>%"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Percentage without higher education that earn &gt;50K: <span class="subst">{lower_education_rich}</span>%"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Min work time: <span class="subst">{min_work_hours}</span> hours/week"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Percentage of rich among those who work fewest hours: <span class="subst">{rich_percentage}</span>%"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Country with highest percentage of rich:"</span>, highest_earning_country)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Highest percentage of rich people in country: <span class="subst">{highest_earning_country_percentage}</span>%"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Top occupations in India:"</span>, top_IN_occupation)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="string">'race_count'</span>: race_count,</span><br><span class="line">        <span class="string">'average_age_men'</span>: average_age_men,</span><br><span class="line">        <span class="string">'percentage_bachelors'</span>: percentage_bachelors,</span><br><span class="line">        <span class="string">'higher_education_rich'</span>: higher_education_rich,</span><br><span class="line">        <span class="string">'lower_education_rich'</span>: lower_education_rich,</span><br><span class="line">        <span class="string">'min_work_hours'</span>: min_work_hours,</span><br><span class="line">        <span class="string">'rich_percentage'</span>: rich_percentage,</span><br><span class="line">        <span class="string">'highest_earning_country'</span>: highest_earning_country,</span><br><span class="line">        <span class="string">'highest_earning_country_percentage'</span>:</span><br><span class="line">            highest_earning_country_percentage,</span><br><span class="line">        <span class="string">'top_IN_occupation'</span>: top_IN_occupation</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">calculate_demographic_data()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="写在最后">写在最后</h1>
<p>最近折腾了好久，利用 Hexo + Github
搭载了个个人博客，欢迎大家来玩啊。</p>
<p><a href="https://mortal-94.github.io/">我的个人博客</a></p>
<p>才刚刚搭建好，现在还是很简陋的，哈哈。</p>
]]></content>
      <categories>
        <category>练手小项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>雅可比行列式</title>
    <url>/2022/06/18/%E9%9B%85%E5%8F%AF%E6%AF%94%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="雅可比行列式">雅可比行列式</h1>
<blockquote>
<p>定义</p>
<p>使用</p>
<ul>
<li>隐函数求导</li>
<li>求空间曲线的切线</li>
</ul>
</blockquote>
<h1 id="参考">参考</h1>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>草稿</tag>
        <tag>雅可比行列式</tag>
      </tags>
  </entry>
  <entry>
    <title>点到空间直线的距离公式</title>
    <url>/2022/06/18/%E7%82%B9%E5%88%B0%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF%E7%9A%84%E8%B7%9D%E7%A6%BB%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="点到空间直线的距离公式">点到空间直线的距离公式</h1>
<figure>
<img src="https://img-blog.csdnimg.cn/img_convert/f853c663befd1e14150ddf20b95a97cd.gif" alt="来源参考2">
<figcaption aria-hidden="true">来源参考2</figcaption>
</figure>
<span id="more"></span>
<p>对于 <strong>点到平面直线的距离公式</strong> 我们都知道是这样的：
<span class="math display">\[
\cfrac{|Ax_0+By_0+C|}{\sqrt{A^2+B^2}}
\]</span> 下面看 <strong>空间</strong> 的</p>
<hr>
<p>对于 <strong>点到空间直线的距离公式</strong>
，本文从<strong>向量</strong>的角度进行探讨。</p>
<p>设某空间直线的方向向量为 <span class="math inline">\(\vec{s}=(m,n,p)\)</span> 过点 <span class="math inline">\(A(x_0,y_0,z_0)\)</span> ；空间上的一点 <span class="math inline">\(P(x,y,z)\)</span> 。令 <span class="math inline">\(\vec{v}=(x-x_0,y-y_0,z-z_0)\)</span> ，即表示由点
<span class="math inline">\(A\)</span> 指向点 <span class="math inline">\(P\)</span> 的向量。</p>
<h3 id="法一">法一</h3>
<p>观察 <span class="math inline">\(\vec{s}\cdot\vec{v}=|\vec{s}|\cdot|\vec{v}|\cdot
{\rm cos}\theta\)</span> ，</p>
<p>而 <span class="math inline">\(|\vec{v}|\cdot{\rm cos}\theta\)</span>
与要求的距离 <span class="math inline">\(d\)</span> 构成以 <span class="math inline">\(|AP|\)</span> 即 <span class="math inline">\(|\vec{v}|\)</span> 为斜边的直角三角形。</p>
<p>故 <span class="math display">\[
d=\sqrt{|\vec{v}|^2-
(|\vec{v}|\cdot\cos\theta)^2}=\sqrt{|\vec{v}|^2-(\frac{\vec{s}\cdot\vec{v}}{|\vec{s}|})^2}\tag{1}
\]</span></p>
<h3 id="法二">法二</h3>
<p>观察 <span class="math inline">\(|\vec{s}\times\vec{v}|\)</span>
，根据向量积的定义，这其实就是由这两个向量构成的平行四边形的面积，</p>
<p>而这个平行四边形的面积有等于 <span class="math inline">\(|\vec{s}|\cdot d\)</span> 。</p>
<p>故 <span class="math display">\[
d=\frac{|\vec{s}\times\vec{v}|}{|\vec{s}|}\tag{2}
\]</span></p>
<h2 id="例子">例子</h2>
<p><span class="math display">\[
求点M_0(2,3,2)到直线\frac{x+1}{1}=\frac{y-2}{0}=\frac{z-1}{-1}
\]</span></p>
<p>对于该题，空间直线的方向向量为 <span class="math inline">\(\vec{s}=(1,0,-1)\)</span> ，过点 <span class="math inline">\(A(-1,2,1)\)</span> ；令 <span class="math inline">\(\vec{v}\)</span> 表示由点 <span class="math inline">\(A\)</span> 指向点 <span class="math inline">\(M_0\)</span> 的向量，则 <span class="math inline">\(\vec{v}=(3,1,1)\)</span> 。</p>
<p>故 <span class="math inline">\(|\vec{v}|=\sqrt{11},\ \
|\vec{s}|=\sqrt{2},\ \ \vec{s}\cdot\vec{v}=-1+0+-1=-2\)</span></p>
<p>以及 <span class="math display">\[
\vec{s}\times\vec{v}=
\begin{vmatrix}
\vec{i} &amp; \vec{j} &amp;\vec{k} \\
1 &amp; 0 &amp; -1 \\
3 &amp; 1 &amp; 1
\end{vmatrix}=
\vec{i}-4\vec{j}-\vec{k},\quad\therefore|\vec{s}\times\vec{v}|=3\sqrt{2}
\]</span> 代入公式(1)计算得 <span class="math display">\[
d=\sqrt{|\vec{v}|^2-(\frac{\vec{s}\cdot\vec{v}}{|\vec{s}|})^2}
=\sqrt{11-(\frac{-2}{\sqrt{2}})^2}
=\sqrt{9}=3
\]</span> 代入公式(2)计算得 <span class="math display">\[
d=\frac{|\vec{s}\times\vec{v}|}{|\vec{s}|}
=\frac{3\sqrt{2}}{\sqrt{2}}
=3
\]</span></p>
<p>验证完毕</p>
<h1 id="参考">参考</h1>
<ol type="1">
<li><p><a href="https://www.zhihu.com/question/322449140/answer/668978444">空间向量如何求点到直线距离？
- ZCC的回答 - 知乎</a></p></li>
<li><p><a href="https://blog.csdn.net/qq_32867925/article/details/114282835">CSND</a></p></li>
</ol>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>向量</tag>
      </tags>
  </entry>
  <entry>
    <title>高数大一下期末</title>
    <url>/2022/06/21/%E9%AB%98%E6%95%B0%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E6%9C%AB/</url>
    <content><![CDATA[<h1 id="高数大一下期末">高数大一下期末</h1>
<p>求极值 <span class="math display">\[
\begin{gather}
f(x,y)=x^2(1+y^2)+3y\ln{y}
\end{gather}
\]</span></p>
]]></content>
      <tags>
        <tag>草稿</tag>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>terminal</title>
    <url>/2022/06/20/terminal/</url>
    <content><![CDATA[<h1 id="terminal">Terminal</h1>
<p>超强终端。</p>
<p><img src="/img/terminal/image-20220622210445601.png"></p>
<p>我打算用其替代 <strong>cmd</strong> 和 <strong>Bash</strong>
来使用（主要是命令高亮看起来舒服而且可以DIY。不过尚未知有何不妥之处（也上网查过了它们之间的区别，没看懂😂。</p>
<span id="more"></span>
<h2 id="powershell-运行-hexo-命令">PowerShell 运行 hexo 命令</h2>
<p>搜索并用管理员权限打开 <code>Windows PowerShell</code></p>
<p><img src="/img/Windows%20PowerShell/QQ截图20220621204203.png"></p>
<p>运行以下命令：</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> UNRESTRICTED</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这是 解除对有安全隐患脚本的运行限制 的意思</p>
</blockquote>
<p>在提示中输入 <code>Y</code></p>
<h2 id="powershell-使用where命令">PowerShell 使用where命令</h2>
<p>参考这篇文章</p>
<p><a href="https://blog.csdn.net/mighty13/article/details/119880762">https://blog.csdn.net/mighty13/article/details/119880762</a></p>
<blockquote>
<h2 id="总结">总结</h2>
<p>在<code>PowerShell</code>中使用类似<code>where</code>命令的查找文件功能的方法有三种：</p>
<ul>
<li><code>where.exe 文件搜索字符串</code></li>
<li><code>gcm 文件搜索字符串 -All</code></li>
<li><code>get-command 文件搜索字符串 -All</code></li>
</ul>
</blockquote>
<h2 id="conda配置">conda配置</h2>
<p>参考这篇文章</p>
<p><a href="https://www.cnblogs.com/dereen/p/ps_conda_env.html">https://www.cnblogs.com/dereen/p/ps_conda_env.html</a></p>
<blockquote>
<p>输入命令<code>conda init powershell</code> 进入base环境</p>
</blockquote>
<p>顺便说下conda配置虚拟环境常用命令</p>
<p>参考这篇文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/94744929">https://zhuanlan.zhihu.com/p/94744929</a></p>
<blockquote>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">创建</span><br><span class="line">conda create <span class="literal">-n</span> your_env_name python=x.x </span><br><span class="line"></span><br><span class="line">激活</span><br><span class="line">conda activate your_env_name</span><br><span class="line"></span><br><span class="line">退出</span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">conda remove <span class="literal">-n</span> your_env_name <span class="literal">--all</span></span><br></pre></td></tr></tbody></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>操作记录</tag>
        <tag>PowerShell</tag>
        <tag>终端</tag>
      </tags>
  </entry>
</search>
